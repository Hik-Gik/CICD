name: CI

on:
  # Триггер при каждом коммите и pull request для веток main, development, release
  push:
    branches: [ "main", "development", "release" ]
  pull_request:
    branches: [ "main", "development", "release" ]
  # Возможность запуска вручную
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Шаг 1: Клонирование репозитория
    - uses: actions/checkout@v4

    # Шаг 2: Установка Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Версия Python (можно изменить по необходимости)

    # Шаг 3: Установка зависимостей (например, если используется requirements.txt)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt  # Устанавливаем зависимости проекта

    # Шаг 4: Запуск тестов
    - name: Run tests
      run: |
        pytest  # Запуск тестов через pytest

    # Шаг 5: Генерация отчета о покрытии тестами
    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m pytest
        coverage report

    # Шаг 6: Генерация документации
    - name: Generate documentation
      run: |
        python generate_docs.py  # Запуск скрипта генерации документации

    # Шаг 7: Автокоммит и пуш изменений с документацией
        - name: Commit and push generated documentation
  run: |
    git config --global user.email "you@example.com"  # Укажите вашу почту
    git config --global user.name "GitHub Action Bot"
    git add docs/API.md  # Добавляем сгенерированную документацию
    git commit -m "Автоматическая генерация документации [skip ci]" || echo "No changes to commit"
    
    # Обновляем локальную ветку перед пушем
    git pull origin ${{ github.ref }} --rebase  # Используем rebase для интеграции изменений
    
    git push origin ${{ github.ref }}  # Пушим изменения в текущую ветку
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Используем ваш Personal Access Token

